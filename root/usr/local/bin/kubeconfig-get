#!/usr/bin/env bash

set -e

source /etc/profile.d/getup.sh

if [ -v KUBECONFIG ]; then
    debug Using KUBECONFIG=$KUBECONFIG
fi

while [ $# -gt 0 ]; do
    case "$1" in
        -n|--cluster-name)
            shift
            cluster_name=$1
        ;;
        -t|--cluster-type)
            shift
            cluster_type=$1
        ;;
        -f|--force)
            read_config=":"
    esac
    shift
done

info Retrieving kubeconfig for $cluster_name/$cluster_type

case $cluster_type in
    kind)
        execute_command kind export kubeconfig --name $cluster_name "$@"
    ;;

    eks)
        export AWS_ACCESS_KEY_ID=$(get_tf_config AWS_ACCESS_KEY_ID aws_access_key_id)
        export AWS_SECRET_ACCESS_KEY=$(get_tf_config AWS_SECRET_ACCESS_KEY aws_secret_access_key)
        export AWS_DEFAULT_REGION=$(get_tf_config AWS_DEFAULT_REGION region)

        [ -n "$AWS_ACCESS_KEY_ID " ] || read_config AWS_ACCESS_KEY_ID 'AWS Access Key ID'
        [ -n "$AWS_SECRET_ACCESS_KEY" ] || _secret=true read_config AWS_SECRET_ACCESS_KEY 'AWS Secret Access Key'
        [ -n "$AWS_DEFAULT_REGION" ] || read_config AWS_DEFAULT_REGION 'AWS Default Region'

        execute_command aws eks update-kubeconfig --name $cluster_name "$@"
    ;;

    doks)
        if ! [ -e ~/.config/doctl/config.yaml ]; then
            execute_command doctl auth init
        fi
        execute_command doctl kubernetes cluster kubeconfig save ${cluster_name}
    ;;

    gke)
        export GCP_PROJECT=$(get_tf_config GCP_PROJECT project_id)
        export GCE_ZONE=$(get_tf_config GCE_ZONE zones | head -1)

        [ -n "$GCP_PROJECT" ] || read_config GCP_PROJECT "GCP Project"
        [ -n "$GCE_ZONE" ] || read_config GCE_ZONE "GCE Zone"

        if [ -e "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
            execute_command gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
        else
            warn "Missing service account file $GOOGLE_APPLICATION_CREDENTIALS (\$GOOGLE_APPLICATION_CREDENTIALS)"
        fi

        execute_command gcloud config set project $GCP_PROJECT
        execute_command gcloud container clusters get-credentials --zone $GCE_ZONE --project $GCP_PROJECT $cluster_name
    ;;

    oke)
        if ! [ -e "$OCI_CLI_CONFIG_FILE" ]; then
            read_config OCI_CLI_REGION "OCI Region"
            oci setup config --region $OCI_CLI_REGION --config-file $OCI_CLI_CONFIG_FILE --cli-rc-file $OCI_CLI_RC_FILE

            [ -e $OCI_CLI_CONFIG_FILE ] && oci setup repair-file-permissions --file $OCI_CLI_CONFIG_FILE || true
            [ -e $OCI_CLI_RC_FILE ] && oci setup repair-file-permissions --file $OCI_CLI_RC_FILE || true
            [ -e $OCI_CLI_KEY_FILE ] && oci setup repair-file-permissions --file $OCI_CLI_KEY_FILE || true
        fi

        while true; do
            unset OCI_COMPARTMENT_NAME
            read_config OCI_COMPARTMENT_NAME "Compartment Name [type ? to list]"
            if [ "$OCI_COMPARTMENT_NAME" != "?" ]; then
                break
            fi
            oci iam compartment list --compartment-id-in-subtree true --all --output table --query 'data[].[id,name]'
        done
        OCI_COMPARTMENT_ID=$(oci iam compartment list --name $OCI_COMPARTMENT_NAME | jq -r '.data[].id')


        while true; do
            unset OCI_CLUSTER_NAME
            read_config OCI_CLUSTER_NAME "Cluster Name [type ? to list]"
            if [ "$OCI_CLUSTER_NAME" != "?" ]; then
                break
            fi
            oci ce cluster list --compartment-id $OCI_COMPARTMENT_ID --all --output table --query 'data[].name'
        done
        OCI_CLUSTER_ID=$(oci ce cluster list --name $OCI_CLUSTER_NAME --compartment-id $OCI_COMPARTMENT_ID | jq -r '.data[0].id')
        execute_command oci ce cluster create-kubeconfig --cluster-id $OCI_CLUSTER_ID \
            --file $CLUSTER_DIR/.kube/config --region $OCI_CLI_REGION \
            --token-version 2.0.0
    ;;

    kubespray)
        [ -f $KUBECONFIG ] && mv -fv $KUBECONFIG $KUBECONFIG.bkp
        ln -fs $CLUSTER_DIR/artifacts/admin.conf $KUBECONFIG
    ;;

    okd)
        [ -f $KUBECONFIG ] && mv -fv $KUBECONFIG $KUBECONFIG.bkp
        ln -fs $CLUSTER_DIR/okd/auth/kubeconfig $KUBECONFIG
    ;;

    aks)
        export ARM_CLIENT_ID=$(get_tf_config ARM_CLIENT_DIR client_id)
        export ARM_CLIENT_SECRET=$(get_tf_config ARM_CLIENT_SECRET client_secret)
        export ARM_TENANT_ID=$(get_tf_config ARM_TENANT_ID tenant_id)
        export ARM_SUBSCRIPTION_ID=$(get_tf_config ARM_SUBSCRIPTION_ID subscription_id)
        export AKS_RESOURCE_GROUP_NAME=$(get_tf_config AKS_RESOURCE_GROUP_NAME resource_group_name)

        [ -n "$ARM_CLIENT_ID" ] || read_config ARM_CLIENT_ID 'ARM Client ID'
        [ -n "$ARM_CLIENT_SECRET" ] || _secret=true read_config ARM_CLIENT_SECRET 'ARM Client Secret'
        [ -n "$ARM_TENANT_ID" ] || read_config ARM_TENANT_ID 'ARM Tenant ID'
        [ -n "$ARM_SUBSCRIPTION_ID" ] || read_config ARM_SUBSCRIPTION_ID 'AKS Subscription ID'
        [ -n "$AKS_RESOURCE_GROUP_NAME" ] || read_config AKS_RESOURCE_GROUP_NAME 'AKS Resource Group Name'

        _print_cmd="az login --service-principal -u $ARM_CLIENT_ID -p <SECRET> -t $ARM_TENANT_ID" \
            execute_command \
                az login --service-principal \
                    -u $ARM_CLIENT_ID \
                    -p $ARM_CLIENT_SECRET \
                    -t $ARM_TENANT_ID \
            || exit

        execute_command \
            az aks get-credentials \
                --admin \
                --name $cluster_name \
                --resource-group $AKS_RESOURCE_GROUP_NAME \
                --subscription $ARM_SUBSCRIPTION_ID \
                --overwrite-existing
    ;;

    *)
        if [ -n "$KUBECONFIG" ] && [ -e "$KUBECONFIG" ]; then
            if ! ask "Overwrite $KUBECONFIG? [Y/n]"; then
                exit 0
            fi
        fi
        info "Paste kubeconfig content (press [CTRL-D] to finish)":
        cat > $KUBECONFIG
esac

if [ -e "$KUBECONFIG" ]; then
    chmod 700 $KUBECONFIG
fi
