#!/bin/bash

variables_files=( $WORKDIR/variables*.tf )

## reorder variables_files so that `variables.tf` is the first item
let i=0
for v in ${variables_files[@]}; do
    if [ "${v##*/}" == variables.tf ]; then
        unset variables_files[$i]
        variables_files=( $WORKDIR/variables.tf ${variables_files[@]} )
        break
    fi
    let i+=1
done

tfvars_data=""

if [ -r "$TF_VARS_FILE" ]; then
  tfvars_data=$(hcl2json "${TF_VARS_FILE}")
fi

for variables_file in ${variables_files[@]}; do
  variables=( $(hcl2json $variables_file | jq -r '.variable|keys|.[]') )

  variables_file_data=$(hcl2json $variables_file)
  variables=( $(jq -r '.variable|keys|.[]' <<<$variables_file_data | sort) )

  for variable in ${variables[*]}; do
    variable_description=$(jq -r ".variable.${variable}[0].description" <<<$variables_file_data)
    if [ "$variable_description" == null ]; then
      warn $variables_file: variable is missing description: $variable
      exit 1
    fi

    variable_type=$(jq -r ".variable.${variable}[0].type" <<<$variables_file_data)
    if [ "$variable_type" == null ]; then
      warn $variables_file: variable is missing type: $variable
      exit 1
    fi

    variable_default=$(jq -r ".variable.${variable}[0].default" <<<$variables_file_data)
    if [ "$variable_default" == null ]; then
      variable_default=""
    fi

    # read from $WORKDIR/terraform.tfvars if available
    variable_value=$(jq -r ".$variable" <<<$tfvars_data)
    if [ "$variable_value" == null ]; then
      variable_value=""
    fi

    # read from env TF_VAR_<name> if available
    tf_var_name=TF_VAR_$variable
    if [ -v "$tf_var_name" ]; then
        variable_value="${!tf_var_name}"
    fi
      # protect string values
      case "$variable_type" in
        string|\${string})
          echo $variable = \"$value\"
        ;;
        *)
          echo $variable = $value
      esac

  done
done
