#!/usr/bin/env bash

export TEST_ROOT_DIR=$(dirname $(realpath -e $0))
export REPO_ROOT_DIR=$(dirname $TEST_ROOT_DIR)

cd $REPO_ROOT_DIR

COLOR_RED="$(tput setaf 1)"
COLOR_GREEN="$(tput setaf 2)"
COLOR_YELLOW="$(tput setaf 3)"
COLOR_YELLOW_BG="$(tput setaf 0)$(tput setab 3)"
COLOR_RESET="$(tput sgr0)"
COLOR_BOLD="$(tput bold)"

function testing()
{
    echo -e "${COLOR_YELLOW_BG}TESTING ${BASH_SOURCE[1]}[${BASH_LINENO[0]}]: $@${COLOR_RESET}" >&2
}

function run()
{
    echo -e "${COLOR_YELLOW}RUNNING ${BASH_SOURCE[1]}[${BASH_LINENO[0]}]: $@${COLOR_RESET}" >&2
    eval "$@" || exit 1
}

function assert()
{
    eval "$@"
    local ret_code=$?

    if [ $ret_code -eq 0 ]; then
        echo -n "${COLOR_GREEN}${COLOR_BOLD}PASSED ${BASH_SOURCE[1]}[${BASH_LINENO[0]}]: ${@@Q}"
        let PASS+=1
    else
        echo -n "${COLOR_RED}${COLOR_BOLD}FAILED ${BASH_SOURCE[1]}[${BASH_LINENO[0]}]: ${@@Q}"
        let FAIL+=1
        echo ${COLOR_RESET}
        exit $ret_code
    fi

    echo ${COLOR_RESET}
}

function invalid_argument()
{
    case "$1" in
        -*)
            usage "Invalid option[${BASH_LINENO[0]}]: $@"
        ;;
        *)
            usage "Invalid or missing parameter[${BASH_LINENO[0]}]: $@"
    esac
}

function usage()
{
    {
    echo "Usage: $0 [OPTIONS...]"
    echo
    echo "  -c, --clone                  Git-clone repository instead copy."
    echo "  -b, --branch BRANCH-NAME     Branch name to test [default: main]."
    echo "  -h, --help                   This help message."
    echo "  -k, --keep                   Keep repo dir after exit."
    echo "  -p, --plans TEST-PLANS       List of test plans [default: tests/test_*]."
    echo "  -r, --remote REMOTE          Output from "git remote get-url origin". Use \`local\` to avoid clonning."
    echo "  -i, --interactive            Show dialogs to select opstion."
    echo "  -t, --types CLUSTER-TYPES    Comma-separated list of types to test from ./templates/ [default: all]."

    if [ $# -gt 0 ]; then
        echo
        echo -e "${COLOR_RED}$@${COLOR_RESET}"
        exit_code=1
    fi

    exit ${exit_code:-0}
    } >&2
}

clone=false
branch=main
types=all
remote=""
plans=tests/test_*
interactive=false
keep=false

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            usage
        ;;
        -b|--branch)
            [ $# -lt 2 ] && invalid_argument $1
            shift
            branch=$1
        ;;
        -c|--clone)
            clone=true
        ;;
        -k|--keep)
            keep=true
        ;;
        -p|--plans)
            [ $# -lt 2 ] && invalid_argument $1
            shift
            plans="$1"
        ;;
        -r|--remote)
            [ $# -lt 2 ] && invalid_argument $1
            shift
            remote=$1
        ;;
        -i|--interactive)
            interactive=true
        ;;
        -t|--types)
            [ $# -lt 2 ] && invalid_argument $1
            shift
            types="${1//,/ }"
        ;;
        *)
            invalid_argument $1
    esac
    shift
done

if [ "$types" == 'all' ]; then
    # copied from ./managed-cluster
    types=( templates/*/ )
    types=( ${types[@]#*/} )
    types=( ${types[@]%/} )
    types="${types[@]/manifests}"
fi

if [ -z "$remote" ]; then
    remote=$(git remote get-url origin 2>&1)
fi

if [ -z "$remote" ]; then
    remote=local
fi

set -u

if [ "$remote" != local ]; then

    tmp=$(mktemp -d --suffix=-managed-cluster)
    if ! $keep; then
        trap 'cd /tmp && rm -rf "$tmp" || true' EXIT
    else
        trap 'echo Keeping dir: $tmp' EXIT
    fi

    if $clone; then
        echo Cloning from remote $remote into $tmp/managed-cluster
        git clone $remote $tmp/managed-cluster
    else
        echo Copying from $PWD into $tmp/managed-cluster
        rsync -a $PWD/ $tmp/managed-cluster
    fi
    cd $tmp/managed-cluster
else
    echo Testing from local directory $PWD
fi

if [ -d .git ]; then
    current_branch=$(git branch --show-current)

    if [ "$current_branch" != "$branch" ]; then
        if ! git checkout -b test-$$-${branch##*/} $branch; then
            git branch -va
            echo
            echo Invalid branch: $branch. Please select from one above.
            exit 1
        fi
    fi
fi

if ! [ -v VERSION ]; then
    VERSION=$(cat version.txt|cut -f1 -d-)
fi

testing "Starting $VERSION tests on branch $branch [$PWD]"

#make

export types
export branch

FAIL=0
PASS=0
: ${CUSTOMER:=evilcorp}
: ${NAME:=evilcluster}

if [ -z "$CUSTOMER" ] || [ -z "$NAME" ]; then
    usage Invalid or missing var: ${CUSTOMER@A} ${NAME@A}
fi

export CUSTOMER NAME

function run_test_plan()
{
    local plan=$1

    rm -rf clusters/$CUSTOMER
    testing "--- Starting test $plan --------------------------------"
    source $plan
    testing "--- Finished test $plan --------------------------------"

    echo
    echo ${COLOR_BOLD}
    if [ $FAIL -eq 0 ]; then
        echo "${COLOR_GREEN}ALL $PASS TESTS PASSED: ${BASH_SOURCE[0]}"
        status=0
    else
       echo "${COLOR_RED}FAILED ${BASH_SOURCE[0]}: $FAIL"
       echo "${COLOR_GREEN}PASSED ${BASH_SOURCE[0]}: $PASS"
       status=1
    fi
    echo ${COLOR_RESET}
}

if $interactive; then
    # select plans to execute
    plans_args=()
    for p in $plans; do
        i=${p#test_}
        i=${i%%_*}
        plans_args+=( $p $i on )
    done
    exec 3>.tmp
    dialog --output-fd 3 --checklist "Select test plans to execute" 0 0 0 ${plans_args[@]}
    plans=$(<.tmp)
    rm -f .tmp

    # select cluster types to test
    types_args=()
    i=1
    for t in $types; do
        types_args+=( $t $i on )
        let i+=1
    done
    exec 3>.tmp
    dialog --output-fd 3 --checklist "Select cluster types to test" 0 0 0 ${types_args[@]}
    set -x
    types=$(<.tmp) && rm -f .tmp
    [ ${types:0:1} != , ] || types=${types:1}
fi

for plan in $plans; do
    run_test_plan $plan || exit $?
done
